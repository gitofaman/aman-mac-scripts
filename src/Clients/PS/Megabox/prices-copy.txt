function mergeJSON(obj1, obj2) {
    var merged = {
        ...obj1,
        ...obj2
    };
    return merged;
}

function findValue(partialKey, jsonObj) {
    for (let key in jsonObj) {
        if (key.includes(partialKey)) {
            return jsonObj[key];
        }
    }
    return null; // Return null if no matching key is found
}
var updateVisibility = (arrEl, blockOrNone) => {
    arrEl.forEach(el => {
        el.style.display = blockOrNone;
    })
}

function findKeyMatchingString(inputString, jsonObj) {
    for (let key in jsonObj) {
        if (key.includes(inputString)) {
            return key;
        }
    }
    return null; // Return null if no match is found
}
var showPromotion = (arg, numberOfMegaboxes, promotionPrice, promotionGreenText = false) => {
    if (arg) {
        if(!promotionGreenText) {
            updateVisibility(promotionTextEl, '')
            // console.log(numberOfMegaboxes)
            updateText(promotionPrice*numberOfMegaboxes, promotionPriceEl)
            updateText(promotionPrice, singularPpriceEl)
        } else {
            updateVisibility(promotionAdditionalText, 'none')
            updateText(promotionGreenText, promotionGreenTextEl)
            // updateText()
        }

    } else {
        updateVisibility(promotionTextEl, 'none')
    }
}
var showPrice = (arg) => {
    var tpParentEl = []
    tpEl.forEach(tp => {
        tpParentEl.push(tp.parentElement)
    })
    if (arg) {
        updateVisibility(tpParentEl, '')
        updateText('Total', totalTextEl)
    } else {
        updateVisibility(tpParentEl, 'none')
        updateText('Total Payable Upfront', totalTextEl)
    }
}
var updateUserForm = (fieldsJson, attr) => {
    var form = document.querySelector(`[${attr}]`)
    // Iterate through the fieldsJson object
    if (!!form.querySelector('[added-text]')) {
        form.querySelector('[added-text]').remove()
    }
    if (!!form.querySelector('[added-email]')) {
        form.querySelector('[added-email]').remove()
    }

    var mName = fieldsJson.customerName
    var mEmail = fieldsJson.customerEmail
    var mNumber = fieldsJson.phone
    var mSpace = fieldsJson.neededSpace
    var mStorage = fieldsJson.timeToStore
    var mMonthPrice = fieldsJson['monthly-rate']
    var mTotalPrice = fieldsJson['total-price']

    var message;
    var startingPrices;
    if (attr === 'dlr-form') {
        if (parseInt(mStorage) > 2) {
            startingPrices = 99 * parseInt(mSpace)
            var actualMonthlyPrice = mMonthPrice;
            mMonthPrice = `${startingPrices} for First 3 Months, then $${actualMonthlyPrice}/Month`
        }
        var mAddress = fieldsJson.address
        var mDeliveryPrice = fieldsJson['delivery-rate']
        var mReDeliveryPrice = fieldsJson['redelivery-rate']
        var mService = fieldsJson.serviceYouAreAfter
        var mServicePrice = fieldsJson['service-price']
        // var mZonePrice = fieldsJson['zone-fee']



        message =
            `
        Name: ${mName}
        Email: ${mEmail} 
        Mobile Number: ${mNumber}
        Address: ${mAddress}
        Space Required: ${mSpace}
        Storage Duration: ${mStorage}
        Service: ${mService}
        Delivery Type: To Door
        Per Month Price: $${mMonthPrice}
        Delivery Price: $${mDeliveryPrice}
        Re Delivery Price: $${mReDeliveryPrice}
        Service Price: $${mServicePrice}
        Admin Fee: $${adminFee}
        Total Price Upfront: $${mTotalPrice}`
    } else {
        // if (parseInt(mStorage) > 2) {
        //     startingPrices = 100 * parseInt(mSpace)
        //     var actualMonthlyPrice = mMonthPrice;
        //     mMonthPrice = `$${startingPrices} per month for First 6 Months, then $${actualMonthlyPrice}/Month, Min. 6 Months Storage`
        // }
        message =
            `
        Name: ${mName}
        Email: ${mEmail} 
        Mobile Number: ${mNumber}
        Space Required: ${mSpace}
        Storage Duration: ${mStorage}
        Delivery Type: Self Move
        Per Month Price: $${mMonthPrice}
        Admin Fee: $${adminFee}
        Total Price Upfront: $${mTotalPrice}`
    }

    // // to set promotion text correctly
    // $('[promotion]').children().first().text(` - ${mMonthPrice}`)
    // $('[p-price]').text(startingPrices)

    console.log(message)


    var quoteTextArea = document.createElement('textarea')
    quoteTextArea.setAttribute('disabled', 'true')
    quoteTextArea.setAttribute('name', 'Quote Data')
    quoteTextArea.setAttribute('added-text', 'true')
    quoteTextArea.style.height = '300px'
    quoteTextArea.style.resize = 'vertical'
    quoteTextArea.innerHTML = message
    form.appendChild(quoteTextArea)
    var emailField = document.createElement('input')
    emailField.setAttribute('disabled', 'true')
    emailField.setAttribute('name', 'Customeremail')
    emailField.setAttribute('added-email', 'true')
    emailField.value = mEmail
    form.appendChild(emailField)
}
var updateText = (textToWrite, arrEl) => {
    if (textToWrite === 0) {
        textToWrite = 'Free';
    }
    arrEl.forEach(el => {
        el.innerHTML = textToWrite;  // Use innerHTML to allow HTML tags
    });
    
}
function findValuesByForm(nameToFind, jsonArray) {
    for (let i = 0; i < jsonArray.length; i++) {
        if (jsonArray[i].name === nameToFind) {
            return jsonArray[i].values;
        }
    }
    return null; // Return null if the name is not found
}
function getMonths (storeIndex, isDeliveryForm) {
    var numOfMonths;
    if(isDeliveryForm) {
        // deliver to door form
        numOfMonths = storeIndex === 0 ? 1 : (storeIndex === 1 ? 3 : 6)
    } else {
        // self move in form
        numOfMonths = storeIndex === 0 ? 1 : 6
    }
    return numOfMonths;
}
var selectedDeliveryType;
$('.section-form-action .radio-btn.is--space').on('click', function(){
    selectedDeliveryType = $(this).index()
})


// helper functions end --->

// selectors and blocks start -->

// to show prices values
var tpEl = document.querySelectorAll('[tp]') // to show total price
var paceEl = document.querySelectorAll('[pace]') //to show space name
var dlEl = document.querySelectorAll('[dl]') // to show delivery rate
var rdlEl = document.querySelectorAll('[rdl]') // to show redelivery rate
var zoneEl = document.querySelectorAll('[zone]') //to show zone fee added caution
var mrEl = document.querySelectorAll('[mr]') //to show monthly rates
var zoneFeeEl = document.querySelectorAll('[zone-fee]') //to show zone fee
var monthsEl = document.querySelectorAll('[nm]') //to show number of months
var zoneCodeEl = document.querySelectorAll('[zone-code]') // to show zone code
var servicePriceEl = document.querySelectorAll('[sp]') // to show service price
var serviceNameEl = document.querySelectorAll('[snm]') // to show service price
var serviceDialogue = document.querySelectorAll('[service-dialogue]') // to show additional service dialogue
var totalTextEl = document.querySelectorAll('[tt]') // to change total text
var promotionTextEl = document.querySelectorAll('[promotion]') //to show promotion text
var promotionPriceEl = document.querySelectorAll('[p-price]') //to show price of starting months promotional 
var singularPpriceEl = document.querySelectorAll('[singular-p-price]') // singular p price
var promotionAdditionalText = document.querySelectorAll('[promotion-additional]') 
var promotionGreenTextEl = document.querySelectorAll('[promotion-green-text]') // promotion green text
var servicePriceRow = document.querySelectorAll('[service-price-row]') // this is the row in quote popup and is supposed to hide when selectedDeliveryType = 1 i.e, To Door
var deliveryPriceRow = document.querySelectorAll('[delivery-rate-row]') // this is the delivery rate row supposed to be hidden for selectedDeliveryType = 2 i.e, Moving Assistance
var noteBlock = document.querySelectorAll('[note-block]')
var noteText = document.querySelectorAll('[note]')
// selectors and blocks end -->

var adminFee = 50

var boxPrices = [{
        "monthly-rate": 179,
        "delivery-rates": [{
            "delivery-rate": 349,
            "redelivery-rate": 349
        }, {
            "delivery-rate": 349,
            "redelivery-rate": 349
        }, {
            "delivery-rate": 0,
            "redelivery-rate": 349
        }]
    }, //1megabox
    {
        "monthly-rate": 338,
        "delivery-rates": [{
            "delivery-rate": 549,
            "redelivery-rate": 549
        }, {
            "delivery-rate": 549,
            "redelivery-rate": 549
        }, {
            "delivery-rate": 0,
            "redelivery-rate": 549
        }]
    }, //2megabox
    {
        "monthly-rate": 477,
        "delivery-rates": [{
            "delivery-rate": 749,
            "redelivery-rate": 749
        }, {
            "delivery-rate": 749,
            "redelivery-rate": 749
        }, {
            "delivery-rate": 0,
            "redelivery-rate": 749
        }]
    }, //3megabox
    {
        "monthly-rate": 636,
        "delivery-rates": [{
            "delivery-rate": 949,
            "redelivery-rate": 949
        }, {
            "delivery-rate": 949,
            "redelivery-rate": 949
        }, {
            "delivery-rate": 0,
            "redelivery-rate": 949
        }]
    }, //4megabox
]

var zonePrices = [{
        "zone": 1,
        "kmStartRange": 0,
        "kmEndRange": 5,
        "charge": 0
    }, //zone:1
    {
        "zone": 2,
        "kmStartRange": 5.1,
        "kmEndRange": 10,
        "charge": 50
    }, //zone:2
    {
        "zone": 3,
        "kmStartRange": 10.1,
        "kmEndRange": 15,
        "charge": 75
    }, //zone:3
    {
        "zone": 4,
        "kmStartRange": 15.1,
        "kmEndRange": 20,
        "charge": 100
    }, //zone:4
    {
        "zone": 5,
        "kmStartRange": 20.1,
        "kmEndRange": 50,
        "charge": 125
    } //zone:5
]

var newValuesObj;

var servicePrices = [149, 199, 299, 349]


function getRadioInputValues(inputName, formName) {
    console.log(formName)
    var form = document.querySelector(`[name=${formName}]`)
    const radioInputs = form.querySelectorAll(`input[type="radio"][name="${inputName}"]`);
    const values = [];

    radioInputs.forEach((input) => {
        values.push(input.value);
    });

    return values;
}

function zoneAndPrice(postcodeCode) {
    // Find the zone number based on the postcode code
    const postcodeZone = postcodeZones.find((zoneData) => zoneData.code === parseInt(postcodeCode));

    if (!postcodeZone) {
        return "Postcode code not found in the postcodeZones array.";
    }

    const zoneNumber = postcodeZone.zone;

    // Find the price based on the zone number
    const priceData = zonePrices.find((zoneData) => zoneData.zone === zoneNumber);

    if (!priceData) {
        return "Zone number not found in the zonePrices array.";
    }

    return {
        'price': priceData.charge,
        'zone': zoneNumber
    };
}

function handleToDoorCost(service, neededSpace, timeToStore, postcode, valuesObj, formName) {
    var codePriceZone = zoneAndPrice(postcode)
    var postCodePrice = codePriceZone.price
    var spaceInputName = findKeyMatchingString('pace', valuesObj)
    var spaces = getRadioInputValues(spaceInputName, formName)
    var storeTimeInputName = findKeyMatchingString('tore', valuesObj)
    var storeTimes = getRadioInputValues(storeTimeInputName, formName)
    var serviceInputName = findKeyMatchingString('ervice', valuesObj)
    var services = getRadioInputValues(serviceInputName, formName)
    var servicePrice = 0
    var spaceIndex = spaces.indexOf(neededSpace) // 0 means 1megabox, 1 means 2megabox etc
    var numberOfMegaboxes = parseInt(neededSpace)
    var numOfMonths = 0;

    var storeIndex = storeTimes.indexOf(timeToStore) 
    // NEW ADJUSTMENT - 0 means 1 month, 1 means 3 months, 2 means more than 6 months (since delivery form)
    var serviceIndex = services.indexOf(service) // 0 means drop off, 1 means wait service, 2 means one man service, 3 means premium service
    // NEW ADJUSTMENT - 0 means Wait Service, 1 means One Man Service, 2 means Two Man Service, 3 means Drop Off Service

    //to show promotion
    switch (storeIndex) {
        case 0: // 1 month - no promotion
            showPromotion(false, numberOfMegaboxes)
            numOfMonths = 1
            break;
        case 1: // 3 months - free delivery
            showPromotion(true, numberOfMegaboxes, false, "Free Delivery for first 3 months")
            numOfMonths = 3
            break;
        case 2: // 6 months - 99/month per megabox for first first 3 months
            showPromotion(true, numberOfMegaboxes, false, "$99/month per megabox for first 3 months, and then >>")
            numOfMonths = 6
        default:
            break;
    }


    // if(storeIndex === 1 && spaceIndex === )
    
    if (spaceIndex >= 0 && storeIndex >= 0) { // means always true
        var numberOfMegaboxes = spaceIndex + 1

        var monthlyRate, zoneFee;
        var totalPrice = 0
        monthlyRate = boxPrices[spaceIndex]["monthly-rate"];
        if (serviceIndex < 0) { // since drop off is removed, this can never occur
            zoneFee = postCodePrice * numberOfMegaboxes;
        } else {
            zoneFee = (postCodePrice * ((numberOfMegaboxes - numberOfMegaboxes % 2) / 2));
            servicePrice = servicePrices[serviceIndex] * numberOfMegaboxes
            if (serviceIndex === 3) {
                // for drop off service, the price is expected to be 349 for first megabox and 175 for additionals so
                servicePrice = servicePrices[serviceIndex] + (numberOfMegaboxes - 1) * 175
            }
            // for services other than drop off, truck can take 2 megaboxes so, postcodePrice is supposed to be multiplied in that manner.
            // service price is expected to be multiplied by number of megaboxes.
        }
        //zone fee is set 0 as of 16 oct according to client request to not include this, 
        //just removing the zone fee = 0 code as below will revert it to show zone fee
        // also show this in the updateUserForm
        zoneFee = 0
        var moveRates = boxPrices[spaceIndex]["delivery-rates"][storeIndex]
        var deliveryRate = moveRates["delivery-rate"]
        var redeliveryRate = moveRates["redelivery-rate"]
        var upfrontDeliveryRate = deliveryRate;
        // if (serviceIndex >= 0) { //if selected service is not drop off then no delivery or redelivery charge
        //     // drop off service was removed so this condition always remains true
        //     deliveryRate = 0
        //     redeliveryRate = 0
        // }

        // it's applicable for moving assistance only
        var transportFee = 0


        if(selectedDeliveryType === 1) { //deliver to door
            servicePrice = 0
            updateVisibility(servicePriceRow, 'none')
            if(storeIndex === 1) { // 3 months then delivery rate is free for first 3 months
                upfrontDeliveryRate = 0
            updateVisibility(deliveryPriceRow, 'none')

            }
            if(storeIndex === 0) {
                updateVisibility(deliveryPriceRow, '')
            }
            // console.log
        } else { // Moving Assistance 
            // In this case, delivery rates are service rates and so they should be hidden
            if(serviceIndex < 3) { // transport fee in case not drop off service
                transportFee = 150
            }
            deliveryRate = 0
            redeliveryRate = 0
            upfrontDeliveryRate = 0

            var surchargeTxt = `<strong>Applicable Surcharges</strong><br>
                                <i>Fixed Time Drop-Off $100<br>
                                Stairs - $5/step<br>
                                Parking Ticket/Fees Ã¢â‚¬â€œ (per council Rates)<br>
                                Narrow Entry - $100</i>`
            var transportFeeTxt = `Transport Fee: $150 `
            
            switch (serviceIndex) {
                case 0: // 0 means Wait Service
                    updateText(`** ${transportFeeTxt};
                        $149 per hour per megabox<br>`, serviceDialogue)
                    updateVisibility(noteBlock, 'none')
                    break;
                case 1: // 1 means One Man Service
                    updateText(`** ${transportFeeTxt};
                        $199 per hour per Megabox <br>`, serviceDialogue)
                        updateVisibility(noteBlock, 'grid')
                        updateText(surchargeTxt, noteText)
                    break;
                case 2: // 2 means Two Man Service
                    updateText(`** ${transportFeeTxt};
                        $299 first hour, $149 Ã¢â‚¬â€œ Additional 30 mins thereafter <br>`, serviceDialogue)
                        updateVisibility(noteBlock, 'grid')
                        updateText(surchargeTxt, noteText)
                    break;
                case 3: // 3 means Drop Off Service
                    updateText(`** 
                    $349 per hour - First Megabox, $175/hour per Additional Megabox (if required)<br>
                    ***Customers will be advised on a drop-off time. If a specific time is required, fixed time drop-off charges apply.***<br>
                    `, serviceDialogue)
                    updateVisibility(noteBlock, 'grid')
                    updateText(surchargeTxt, noteText)
                    break;
                default:
                    break;
            }
            updateVisibility(deliveryPriceRow, 'none')
        }


        var numOfMonths = getMonths(storeIndex, true) // since this is a delivery form calculator
        // total price upfront won't include delivery or redelivery rates
        totalPrice = (monthlyRate * numOfMonths) + adminFee + servicePrice + ( upfrontDeliveryRate * 2 ) + transportFee

        if(storeIndex === 2 && selectedDeliveryType === 2) { // 6 months then delivery rate is 99 for first 3 months // moving assistance
            totalPrice = (99 * numberOfMegaboxes) + adminFee + servicePrice
        }
        

        return {
            "zone": codePriceZone.zone || 0,
            "monthly-rate": monthlyRate,
            "months": numOfMonths,
            "zone-fee": zoneFee || 0,
            "service-index": serviceIndex,
            "delivery-rate": deliveryRate,
            "redelivery-rate": redeliveryRate,
            "total-price": totalPrice,
            "service-price": servicePrice,
            "store-index": storeIndex,
            "admin-fee": adminFee,
            "transport-fee": transportFee
        }
    } else {
        return false;
    }
}

function handleSelfDeliveryCost(neededSpace, timeToStore, valuesObj, formName) { // pricing calculator for self move in
    var spaceInputName = findKeyMatchingString('pace', valuesObj)
    var spaces = getRadioInputValues(spaceInputName, formName)
    var storeTimeInputName = findKeyMatchingString('tore', valuesObj)
    var storeTimes = getRadioInputValues(storeTimeInputName, formName)
    var spaceIndex = spaces.indexOf(neededSpace) // 0 means 1megabox, 1 means 2megabox etc
    var numberOfMegaboxes = parseInt(neededSpace)

    var storeIndex = storeTimes.indexOf(timeToStore) // 0 means 0-5 months, 1 means 6-12, 2 means more than 12
    // NEW ADJUSTMENT - 0 means 1 month, 1 means 6 months (since self move in form)

    //to show promotion
    switch (storeIndex) {
        case 0: // 1 month - no promotion
            showPromotion(false, numberOfMegaboxes)
            break;
        case 1: // 6 months - 100/month per megabox
            showPromotion(true, numberOfMegaboxes, 100, false)
            break;
        default:
            break;
    }

    if (spaceIndex >= 0 && storeIndex >= 0) {
        var totalPrice = 0
        monthlyRate = boxPrices[spaceIndex]["monthly-rate"];

        var numOfMonths = getMonths(storeIndex, false) // false means we're finding months for self move in form
        totalPrice = monthlyRate + adminFee
        // monthly starting rates is $100 if store index is 1 i.e, 6 months
        if(storeIndex == 1) {
            totalPrice = (100 * numberOfMegaboxes) + adminFee
            var allMonthsPrice = (100*numberOfMegaboxes*6) + adminFee
            updateVisibility(noteBlock, 'grid')
            updateText(`Total Upfront : $${allMonthsPrice}<br> Payment to be made on day : $${totalPrice} `, noteText)
        } else {
            updateVisibility(noteBlock, 'none')
        }



        return {
            "monthly-rate": monthlyRate,
            "months": numOfMonths,
            "total-price": totalPrice,
            "store-index": storeIndex,
            "admin-fee": adminFee
        }
    } else {
        return false;
    }
}


var updatePrice = (formName) => {
    var jsonDataToSend = {};
    var valuesObj = findValuesByForm(formName, savedFormDatas)
    newValuesObj = valuesObj;
    var postcode = findValue('code', valuesObj)
    var neededSpace = findValue('pace', valuesObj)
    var timeToStore = findValue('tore', valuesObj)
    var serviceYouAreAfter = findValue('ervice', valuesObj)
    jsonDataToSend.neededSpace = neededSpace
    jsonDataToSend.timeToStore = timeToStore
    jsonDataToSend.phone = findValue('hone', valuesObj)
    jsonDataToSend.customerName = findValue('ame', valuesObj) + ' ' + findValue('ast-', valuesObj)
    jsonDataToSend.customerEmail = findValue('mail', valuesObj)
    jsonDataToSend['date'] = findValue('')
    var selectedStoreIndex = 0;
    if (!!postcode) {
        var priceData = handleToDoorCost(serviceYouAreAfter, neededSpace, timeToStore, postcode, valuesObj, formName)
        jsonDataToSend.postcode = postcode
        jsonDataToSend.serviceYouAreAfter = serviceYouAreAfter;
        jsonDataToSend.address = findValue('ddress', valuesObj)
        jsonDataToSend = mergeJSON(jsonDataToSend, priceData);
        updateUserForm(jsonDataToSend, 'dlr-form')
        if (priceData) {
            var deliveryRate, redeliveryRate, serviceRate;
            if (priceData["delivery-rate"] > 0) {
                deliveryRate = '$' + priceData["delivery-rate"]
            } else {
                deliveryRate = 0
            }
            if (priceData["redelivery-rate"] > 0) {
                redeliveryRate = "$" + priceData["redelivery-rate"]
            } else {
                redeliveryRate = 0
            }
            if (priceData['service-price'] > 0) {
                serviceRate = "$" + priceData['service-price']
            } else {
                serviceRate = 0
            }
            updateText(priceData["monthly-rate"], mrEl)
            updateText(priceData["zone-fee"], zoneFeeEl)
            if (priceData["zone-fee"] > 0) {
                updateText(priceData["zone-fee"], zoneFeeEl)
                updateText(priceData['zone'], zoneCodeEl)
                updateVisibility(zoneEl, 'block')
            } else {
                updateVisibility(zoneEl, 'none')
            }
            updateText(deliveryRate, dlEl)
            updateText(redeliveryRate, rdlEl)
            updateText(priceData["months"], monthsEl)
            updateText(neededSpace, paceEl)
            updateText(priceData["total-price"], tpEl)
            updateText(serviceYouAreAfter, serviceNameEl)
            updateText(serviceRate, servicePriceEl)
            selectedStoreIndex = priceData['store-index']
        }
    } else {
        var priceData = handleSelfDeliveryCost(neededSpace, timeToStore, valuesObj, formName)
        jsonDataToSend = mergeJSON(jsonDataToSend, priceData);
        updateUserForm(jsonDataToSend, 'self-form')
        if (priceData) {
            updateText(priceData["monthly-rate"], mrEl)
            updateText(priceData["months"], monthsEl)
            updateText(neededSpace, paceEl)
            updateText(priceData["total-price"], tpEl)
            selectedStoreIndex = priceData['store-index']
        }
    }

    // to make sure price doesn't show up for more than 1 month quote
    // if (selectedStoreIndex > 0) {
    //     showPrice(false)
    // } else {
    //     showPrice(true)
    // }
    // price should show up always
    showPrice(true)
    

    //to show promotion
    // switch (selectedStoreIndex) {
    //     case 0:
    //         showPromotion(false, numberOfMegaboxes)
    //         break;
    //     case 1:
    //         showPromotion(true, numberOfMegaboxes)
    //         break;
    //     case 2:
    //         showPromotion(true, numberOfMegaboxes)
    //     default:
    //         break;
    // }
}


//postcode
//megabox space
//storing time
//services that you're being offered

var savedFormDatas = []
var allFormsToSave = Array.from(document.querySelectorAll('[save-forms]'))

function updateSavedData(formName, values) {
    const existingFormIndex = savedFormDatas.findIndex(item => item.name === formName);

    if (existingFormIndex !== -1) {
        savedFormDatas[existingFormIndex].values = {
            ...savedFormDatas[existingFormIndex].values,
            ...values
        };
    }
    updatePrice(formName)
}

allFormsToSave.forEach(formToSave => {
    var formName = formToSave.getAttribute('name')
    var formInSavedDatas = false;
    var savedData = {}
    savedData.name = formName
    // Function to update the formInputValues object
    function updateFormInputValues() {
        const formInputValues = {};
        const inputs = formToSave.elements;

        for (let i = 0; i < inputs.length; i++) {
            const input = inputs[i];
            const inputName = input.name;

            if (input.type === 'radio') {
                if (input.checked) {
                    formInputValues[inputName] = input.value;
                }
            } else if (input.type === 'checkbox') {
                formInputValues[inputName] = input.checked;
            } else {
                formInputValues[inputName] = input.value;
            }
        }
        if (!formInSavedDatas) {
            formInSavedDatas = true;
            savedData.values = formInputValues;
            savedFormDatas.push(savedData)
        } else {
            savedData.values = formInputValues
            updateSavedData(formName, savedData)
        }
    }

    // Function to handle input changes
    function handleInputChange(event) {
        updateFormInputValues();
    }

    // Attach change event listeners to form inputs
    formToSave.addEventListener('change', handleInputChange);

    // Initialize formInputValues
    updateFormInputValues();
})